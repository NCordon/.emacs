#+TITLE: My Emacs configuration
#+AUTHOR: ncordon
#+STARTUP: indent

* Bootstrap packages
Install some needed packages
#+begin_src emacs-lisp
(use-package with-editor :ensure t)
(use-package websocket :ensure t)
(use-package tablist :ensure t)
(use-package key-chord :ensure t)
(use-package hydra :ensure t)
(use-package ivy :ensure t)
(use-package pdf-tools :ensure t)
#+end_src

* Global
Changes the path of =customization= file.
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

** Theme
Loads robbyrussel theme in eshell git mode
#+begin_src emacs-lisp
(use-package eshell-git-prompt :ensure t)
(eshell-git-prompt-use-theme 'powerline)
#+end_src

** Editor
Enables Visual Line Mode to wrap lines when reaching to the window edge
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

Changes tabs for spaces
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

Enables Visual Line Mode to wrap lines when reaching to the window edge 
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

Replace selected text with what you're writing instead of just inserting it
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

Enables C-x C-l and C-x C-u resp. to downcase/upcase a region
#+begin_src emacs-lisp
(put 'downcase-region 'disabled t)
(put 'upcase-region 'disabled t)
#+end_src

** Files
Configures =.s= extension with asm-mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.s\\'" . asm-mode))
#+end_src

Configures flycheck for every language
#+begin_src emacs-lisp
(use-package flycheck :ensure t)
(use-package flycheck-haskell :ensure t)
(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src
* Coding
#+begin_src emacs-lisp
(use-package ess :ensure t)
(use-package sage-shell-mode :ensure t)
(use-package yaml-mode :ensure t)
#+end_src

** R
R mode
#+begin_src emacs-lisp
(require 'ess-site)
#+end_src
** Python
Fuente: [[https://www.emacswiki.org/emacs/IndentingPython][EmacsWiki]]
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
	    (lambda ()
		    (setq-default indent-tabs-mode nil)
		    (setq-default tab-width 4)
		    (setq-default py-indent-tabs-mode t)
	    (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
#+end_src
* Org mode

Loads Org-mode and latex-packages
#+begin_src emacs-lisp
(use-package org-ref :ensure t)
(use-package markdown-mode :ensure t)
(use-package markdown-preview-eww :ensure t)
(use-package org-bullets :ensure t)
(use-package helm :ensure t)
(use-package biblio :ensure t)
(use-package auctex :defer t :ensure t)

(require 'ox)
(require 'latex) 
(require 'ox-latex)
(require 'iso-transl)
(setq org-src-fontify-natively t)
#+end_src

Changes bullets for Org headings
#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

Macro to toggle complete preview of latex of an Org file. Keybinded to C-x C-o
#+begin_src emacs-lisp
(fset 'org-latex-complete-preview
      (lambda (&optional arg) "Keyboard macro." (interactive "p")
        (kmacro-exec-ring-item
         (quote ("" 0 "%d")) arg)
        )
      )
(global-set-key (kbd "C-x C-o") 'org-latex-complete-preview)
#+end_src

Sets TODO keywords for Org's lists states.
#+begin_src emacs-lisp
(setq org-todo-keywords
'((sequence "TODO" "WORKING ON IT" "|" "DONE" "CANCELED")))
#+end_src       

Enables automatic inline-displaying of images
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+end_src

** LaTeX

Takes care of code highlightings when generating pdfs
#+begin_src emacs-lisp
(setq org-latex-listings 'minted
      ;;org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
     ;; '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(add-to-list 'org-latex-packages-alist '("" "minted" nil))
#+end_src

** Keybindings
Adds keybindings for ace-mc (multiple cursors)

#+begin_src emacs-lisp
(use-package ace-mc :ensure t)
(use-package ace-jump-mode :ensure t)
(use-package multiple-cursors :ensure t)
(global-set-key (kbd "C-)") 'ace-mc-add-multiple-cursors)
(global-set-key (kbd "C-M-)") 'ace-mc-add-single-cursor)
#+end_src 

** Programming
Enabled languages for code snippets in org-mode

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python .t)
   (R .t)
   (ditaa .t)
   (emacs-lisp . t)
   (js .t)
   (calc .t)
   (haskell .t)
   (sh .t)))
#+end_src

** Diagrams 
Changes ditaa path. Requires a previous =sudo apt-get install ditaa=

#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
#+end_src

** Org-ref
Taken from README of https://github.com/jkitchin/org-ref
#+begin_src emacs-lisp
(require 'org-ref)

(setq reftex-default-bibliography '("~/universidad/bibliography/references.bib"))

(setq org-ref-bibliography-notes "~/universidad/bibliography/notes.org" 
      org-ref-default-bibliography '("~/universidad/bibliography/references.bib")
      org-ref-pdf-directory "~/universidad/bibliography/bibtex-pdfs/")

(setq bibtex-completion-bibliography  "~/universidad/bibliography/notes.org"
      bibtex-completion-library-path "~/universidad/bibliography/bibtex-pdfs"
      bibtex-completion-notes-path "~/universidad/bibliography/helm-bibtex-notes")

(setq bibtex-completion-pdf-open-function 'org-open-file)
#+end_src

* Magit
#+begin_src emacs-lisp
(use-package magit :ensure t)
#+end_src

** Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
#+end_src
** Ignore section
Taken from [[here]http://emacs.stackexchange.com/questions/28502/magit-show-ignored-files/28506#28506]

#+begin_src emacs-lisp
(defun magit-ignored-files ()
  (magit-git-items "ls-files" "--others" "--ignored" "--exclude-standard" "-z" "--directory"))

(defun magit-insert-ignored-files ()
  (-when-let (files (magit-ignored-files))
    (magit-insert-section (ignored)
      (magit-insert-heading "Ignored files:")
      (magit-insert-un/tracked-files-1 files nil)
      (insert ?\n))))

(magit-add-section-hook 'magit-status-sections-hook 'magit-insert-ignored-files 'magit-insert-untracked-files t)
#+end_src

